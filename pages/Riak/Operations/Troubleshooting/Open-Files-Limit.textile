Riak can consume a large number of open file handles during normal operation. In particular, the Bitcask backend may accumulate a number of data files before it has a chance to run a merge process. You can count the number of data files in the bitcask directory with following command:

```bash 
ls data/bitcask/*/* | wc -l 
```

Please note that the creation of numerous data files is normal. Each time Riak is started Bitcask creates a new data file per partition; every so often Bitcask will merge a collection of data files into a single file to avoid accumulating file handles. It's possible to artificially inflate the number of file handles Bitcask uses by repeatedly writing data and restarting Riak. The below bash command illustrates this issue:

```bash 
for i in {1..100} 
do 
riak stop 
riak start 
sleep 3 
curl http://localhost:8098/riak/test -XPOST -d "x" \ 
-H "Content-Type: text/plain" 
ls data/bitcask/*/* | wc -l 
done 
```

h2. Changing the limit

Most operating systems can change the open-files limit using the @ulimit -n@ command. Example:

```bash
ulimit -n 1024
```

However, this only changes the limit for the *current shell session*.  Changing the limit on a system-wide, permanent basis varies more between systems.

h3. Linux

On most Linux distributions, the total limit for open files is controlled by @sysctl@.  

```bash
$ sysctl fs.file-max
fs.file-max = 50384
```

As seen above, it is generally set high enough for Riak. If you have other things running on the system, you might want to consult the [[sysctl manpage|http://linux.die.net/man/8/sysctl]] for how to change that setting. However, what most needs to be changed is the per-user open files limit.  This requires editing @/etc/security/limits.conf@, which you'll need superuser access to change.  If you installed Riak or Riak Search from a binary package, add lines for the @riak@ user like so, substituting your desired hard and soft limits:

```text
riak soft nofile 2048
riak hard nofile 10240
```

This helps increase the file limit when the user riak does a full login using other means than sudo, to e.g. start Riak using just the `riak` command. Using sudo (e.g. as @sudo su - riak@) has side effects in terms of open file limits. On Ubuntu they'll be reset to 1024, no matter what's set in @/etc/security/limits.conf@ for the riak user.

On Ubuntu, if you're always relying on the init scripts to start Riak, you can create the file @/etc/default/riak@ and specify a manual limit like so:

```text
ulimit -n 4096
```

This file is automatically sourced from the init script, and the Riak process started by it will properly inherit this setting. As init scripts are always run as the root user, there's no need to specifically set limits in @/etc/security/limits.conf@ if you're solely relying on init scripts.

On CentOS/RedHat systems make sure to set a proper limit for the user you're usually logging in with to do any kind of work on the machine, including managing Riak. On CentOS, sudo properly inherits the values from the executing user.

Reference: [[http://www.cyberciti.biz/faq/linux-increase-the-maximum-number-of-open-files/]]

h3. Solaris

In Solaris 8, there is a default limit of 1024 file descriptors per process. In Solaris 9, the default limit was raised to 65536. To increase the per-process limit on Solaris, add the following line to @/etc/system@:

```text
set rlim_fd_max=65536
```

Reference: [[http://blogs.sun.com/elving/entry/too_many_open_files]]

h3. Mac OS/X

To check the current limits on your OS/X system, run (the final two columns are the soft and hard limits, respectively):

```bash
launchctl limit maxfiles 2048 unlimited
```

This will set the limit until the next time you reboot. To make the change permanent add the line below to @/etc/launchd.conf@ (superuser access required):

```text
limit maxfiles 2048 unlimited
```

*Note:* Snow Leopard (10.6) may not allow "unlimited" for the maxfiles setting, in which case, just omit it.

Reference: [[http://artur.hefczyc.net/node/27]]
