h1. HTTP API

Riak has a rich, full-featured HTTP 1.1 API.  This is an overview of the operations you can perform via HTTP and can be used as a guide for developing a compliant client.  All URLs assume the default configuration values where applicable. All examples use @curl@ to interact with Riak.

<div class="note"><div class="title">Client ID</div>All requests should include the @X-Riak-ClientId@ header, which can be any string that uniquely identifies the client, for purposes of tracing object modifications in the [[vector clock|Vector Clocks]].</div>

<div class="note"><div class="title">URL Escaping</div>Buckets, keys, and link specifications may not contain unescaped slashes. Use a URL-escaping library or replace slashes with @%2F@.</div>

h2. Bucket Operations

Buckets in Riak are a virtual concept. They exist primarily as a namespace mechanism and as a mechanism to isolate specific behavior changes that deviate from the default bucket settings. For example, you may augment the [[number of replicas|Replication#Selecting-an-N-value-(n_val)]], the specific storage backend and [[commit hooks|Pre- and Post-Commit Hooks]] at the bucket level. 

<div class="info"><div class="title">How Many Buckets Can I Have?</div>
Currently, buckets come with virtually no cost except for when you modify the default bucket properties. Modified Bucket properties are gossiped around the cluster and therefore add to the amount of data sent around the network. In other words, buckets using the default bucket properties are free.
</div>

<div class="note"><div class="title">Delete Buckets</div>At the moment there is no straightforward way to delete an entire Bucket. There is, however, an open ticket for the feature. To delete all the keys in a bucket, you'll need to delete them all individually.</div>

* [[HTTP List Buckets]]
* [[HTTP List Keys]]
* [[HTTP Get Bucket Properties]]
* [[HTTP Set Bucket Properties]]

h2. Object/Key Operations 

The combination of bucket, key, value and metadata are referred to as a "Riak Object". The operations below affect individual objects in Riak.

* [[HTTP Fetch Object]]
* [[HTTP Store Object]]
* [[HTTP Delete Object]]

h2. Query Operations

* [[HTTP Link Walking]]
* [[HTTP MapReduce]]

h2. Luwak Operations (Large Objects)

Luwak is an optional interface that automatically segments large files across multiple Riak Objects.

* [[HTTP Get Luwak Properties]]
* [[HTTP List Luwak Keys]]
* [[HTTP Fetch Luwak Object]]
* [[HTTP Store Luwak Object]]
* [[HTTP Delete Luwak Object]]

h2. Server Operations

* [[HTTP Ping]]
* [[HTTP Status]]
* [[HTTP List Resources]]
